{
  "comments": [
    {
      "key": {
        "uuid": "a30d2e7d_347c789b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 19,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-09-01T07:07:27Z",
      "side": 1,
      "message": "What is the use case behind this? Is it related to per-degree ROADM TX power setting?",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 73
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc8443a2_8bebac85",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 19,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-09-01T12:18:35Z",
      "side": 1,
      "message": "The reason behind that is to enable to apply other parameters (delta power, gain ...) even if the type is not defined and  be able to define edfa objects just for degree information purpose. Without this change, one can not define a power on a booster direction without specifying the booster variety.",
      "parentUuid": "a30d2e7d_347c789b",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 73
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27ae07a2_8d2b0769",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 19,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-10-08T14:59:18Z",
      "side": 1,
      "message": "I would like to not implement this new feature for the current JSON files, and instead do that in the new YANG+JSON format only. I\u0027ll be pushing an updated patch which undoes that change in gnpy.tools.json_io.",
      "parentUuid": "dc8443a2_8bebac85",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 73
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1384c995_08fdfcf5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 19,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-11-03T15:43:32Z",
      "side": 1,
      "message": "We decided to take this patch series, so it\u0027s going in. Next time, however, I would prefer separate patches for separate features -- and adding per-degree parameters is a different feature from making it possible to not specify type_variety in this context.",
      "parentUuid": "27ae07a2_8d2b0769",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 73
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25af623d_a634fee6",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-09-01T07:07:27Z",
      "side": 1,
      "message": "Should we perhaps change the __call__ signature so that it also takes a \"next node\" parameter for all network elements, not just ROADMs? That should also make it possible to simplify the Add/Drop SNR penalty in another patch, BTW.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff7b7f31_6cd3b21b",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-09-01T12:18:35Z",
      "side": 1,
      "message": "OK for me !",
      "parentUuid": "25af623d_a634fee6",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23db3411_1f01c1ba",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-10-08T14:59:18Z",
      "side": 1,
      "message": "this will be done in a follow-up patch, apparently.",
      "parentUuid": "ff7b7f31_6cd3b21b",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f58462b_1ffc1a5a",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 232,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-09-01T07:07:27Z",
      "side": 1,
      "message": "I might be a bit tired now, but isn\u0027t this effectively a no-op? I\u0027m assuming that this ROADM parameter is already a dict, is that not the case?",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9788bc76_9ec7aeb4",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 232,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-09-01T12:18:35Z",
      "side": 1,
      "message": "Yes, I letf it this way so that both dict are not the same object (kind of a copy), may be for future, in order not to change the initial target in later developments.",
      "parentUuid": "7f58462b_1ffc1a5a",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80fa5b59_de01a8a7",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 232,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-10-08T14:59:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9788bc76_9ec7aeb4",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57a59577_fe52f217",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 236,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-09-01T07:07:27Z",
      "side": 1,
      "message": "I think this comment could be rephrased as \"ROADM doesn\u0027t amplify, it can only attenuate\", and it would be more readable to me that way",
      "range": {
        "startLine": 235,
        "startChar": 8,
        "endLine": 236,
        "endChar": 99
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "878f2b38_4db2293c",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 236,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-09-01T12:18:35Z",
      "side": 1,
      "message": "Agreed !",
      "parentUuid": "57a59577_fe52f217",
      "range": {
        "startLine": 235,
        "startChar": 8,
        "endLine": 236,
        "endChar": 99
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37cf2fda_5b633dcd",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 236,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-10-08T14:59:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "878f2b38_4db2293c",
      "range": {
        "startLine": 235,
        "startChar": 8,
        "endLine": 236,
        "endChar": 99
      },
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df5bd776_c61056db",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 242,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2020-09-01T08:10:24Z",
      "side": 1,
      "message": "Was the old implementation (using self.params.target_pch_out_db instead of self.effective_pch_out_db here) wrong? Does it make a difference?",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d42836e2_1ba2799c",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 242,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-09-01T08:28:04Z",
      "side": 1,
      "message": "I think that this is a correct change -- if the original value of params.target_pch_out_db was lower than pref.p_spani, this is effectively a bugfix. It might still get reverted by the exceeding_att below I think, which suggests to me that this whole function is (still) a candidate for refactoring. It should make it obvious that thresholds are exceeded, and react accoridngly, IMHO. I\u0027ll try to come up with something.",
      "parentUuid": "df5bd776_c61056db",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ee61072_6d16ee5e",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 242,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-09-01T12:18:35Z",
      "side": 1,
      "message": "Indeed, I think the old implementation was not working OK in case of power in lower than target power",
      "parentUuid": "d42836e2_1ba2799c",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37f05d0a_bfd14691",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 242,
      "author": {
        "id": 1017862
      },
      "writtenOn": "2020-09-01T13:05:12Z",
      "side": 1,
      "message": "If this is actually a bug in the current implementation, maybe it would be more clear to make this change in a separate \"bugfix\" commit? On the other hand I\u0027m not sure since it looks to me like the exceeding_att below is intended to handle the situation when power in for any channel is lower than target power out (note that individual channel powers may be different than pref.p_spani).",
      "parentUuid": "7ee61072_6d16ee5e",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a39ab023_97027d3f",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 242,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-09-04T08:31:10Z",
      "side": 1,
      "message": "I have tried to dig a bit more on this, and I think that Jonas is correct. But I also think that there is a discrepancy between the channel power that is recorded in the attribute p_spani (seems to be the signal power), and the carriers power that also includes the noises. Which confused me.\nSo if we consider a ROADM with input power p_spani equals to -20.0dBm, in fact it is the signal power that is equals to -20.0dBm. carriers total power might be higher (maybe ranging between -19.981 and -19.982 for this example) due to lin and NL noises. \nThe current implementation thus equalizes the carriers power to the minimum one (-19.982), while my correction applies the signal equalization -20.0.\n\nI think that the current equalization is more correct as Jonas said because equalization is performed on monitored power which includes signal and noise. However, then I think we should update the effective_pch_out_db parameter with the carriers power (inc noise) value to avoid this discrepancy. \nWhat do you think ? \n\nAnd going even a bit further,  in the case we can apply the target_pch_out_db , then shouldn\u0027t we consider that this target power is for the whole power inc noise ? and then carriers signal power should be set a bit lower according to that ?\n\nBesides, I also think that in the situation of pin lower than ptarget, we should apply a minimum loss. I can propose a patch for that.\n\nPlease tell me what you think about that.",
      "parentUuid": "37f05d0a_bfd14691",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a34a70c_755ba13b",
        "filename": "gnpy/core/elements.py",
        "patchSetId": 12
      },
      "lineNbr": 242,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-10-08T14:59:18Z",
      "side": 1,
      "message": "I\u0027ll have to re-read the code a few more times I think. Either way, the \"real\" ROADM will equalize based on total channel power as measured on the device, which means useful signal power plus any impairments, so that\u0027s probably the value we should be working with, yup.",
      "parentUuid": "a39ab023_97027d3f",
      "revId": "d108a714f1a33369b071062c326acec11c9d2ac5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}