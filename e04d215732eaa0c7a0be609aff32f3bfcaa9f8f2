{
  "comments": [
    {
      "key": {
        "uuid": "1c9783ff_1d049b2c",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 51,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T14:29:28Z",
      "side": 1,
      "message": "I\u0027ve renamed that fixture to `equipment`, so this line (and all others like that) can be removed.",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2540a397_c5a21684",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 51,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-22T15:23:55Z",
      "side": 1,
      "message": "thanks!",
      "parentUuid": "1c9783ff_1d049b2c",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85b65063_cce982b3",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T14:29:28Z",
      "side": 1,
      "message": "nit: the backslash is redundant here. Given that there are already longer lines in this file and that it\u0027s still \u003c100 chars, I think we can safely go behind that 80 chars/line limit with today\u0027s screens :).",
      "range": {
        "startLine": 55,
        "startChar": 60,
        "endLine": 55,
        "endChar": 61
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bbdfd98_137af2ba",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-22T15:23:55Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "85b65063_cce982b3",
      "range": {
        "startLine": 55,
        "startChar": 60,
        "endLine": 55,
        "endChar": 61
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33a8eb08_5b4037c5",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T14:29:28Z",
      "side": 1,
      "message": "These variables \"shadow\" global variables, that was confusing to me. I understand why you wrote it that way, but I\u0027ve renamed the global to read cband_freq_min and cband_freq_max.",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 86,
        "endChar": 35
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fda4a045_18569571",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-22T15:23:55Z",
      "side": 1,
      "message": "agreed",
      "parentUuid": "33a8eb08_5b4037c5",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 86,
        "endChar": 35
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3b8e865_ff20edab",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T14:29:28Z",
      "side": 1,
      "message": "This is not testing anything, so I wonder why it is in the test. Have you used that during the initial debugging? Is that something that should be still kept in there? If so, would it make sense to convert these into tests?",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 96,
        "endChar": 52
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ffd4816_a1fd8b41",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-22T15:23:55Z",
      "side": 1,
      "message": "This set of verification is not so easy to follow, and the prints are expected to help in case the test does not pass, to figure out where the issue can come from. No need to convert into test in my opinion (this is already covered).\nI understand that other prints are redundant, but this info here might be helpful to understand the guardband and the difference of encoding...",
      "parentUuid": "c3b8e865_ff20edab",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 96,
        "endChar": 52
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87739ce6_d4dc14ca",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "It could have been a bad day on my side, but this test was not easy to read for me. Anyway, I refactored this, removing those prints that I found superfluous, while -- I hope -- preserving the useful output. I appreciate feedback for that.",
      "parentUuid": "4ffd4816_a1fd8b41",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 96,
        "endChar": 52
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf274fda_69749e7a",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-23T12:20:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87739ce6_d4dc14ca",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 96,
        "endChar": 52
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73cebc90_facf2a02",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T14:29:28Z",
      "side": 1,
      "message": "These prints duplicate that assert below. I\u0027ll push an extra PS which removes just these prints where I\u0027m certain that no information is lost in an extra patchset, so that you can review them.",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "708e026c_d608546e",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-22T15:23:55Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "73cebc90_facf2a02",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e6ddc4_6100f319",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "708e026c_d608546e",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "473b36ce_c97d8dc0",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "The code doesn\u0027t check that. It calls assign_spectrum(), but it never consults the OMS class for any effect as far as I can see. All other function invocations are already covered by the docstrings of the respective functions, so I\u0027ll just remove this test. (Please check if I missed something.)\n\n(And BTW, the doctests are skipped when pytest is launched from tests/ -- just a heads-up to keep that in mind in your workflow.)",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3da967b_ff3d2e55",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-23T09:54:12Z",
      "side": 1,
      "message": "understood and agreed, thanks !",
      "parentUuid": "473b36ce_c97d8dc0",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c858bbf_5baa2180",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-23T12:20:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3da967b_ff3d2e55",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c214a10_14475c2c",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 212,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "I assume you meant `and` here. I think that splitting this into separate asserts is better.",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 24
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1ead38f_0e922c29",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 212,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-23T09:54:12Z",
      "side": 1,
      "message": "agreed (but this test is removed no ?)",
      "parentUuid": "7c214a10_14475c2c",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 24
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94f6f0ca_7bc612d7",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "This comment disagrees with the actual test, so I\u0027ll be changing the comment. Can you please check that I have not made a mess?",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5a39675_40e88298",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-23T09:54:12Z",
      "side": 1,
      "message": "yes: bad comment due to copy... should be test n and m acceptable values",
      "parentUuid": "94f6f0ca_7bc612d7",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70345f9b_5c42fb99",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-23T12:20:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5a39675_40e88298",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93801ea0_6ada9772",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "I would prefer if we use type annotations for rejecting semantically meaningless input -- otherwise we could also test with strings and dicts and a bunch of other types, IMHO. Are you OK with me just removing non-integer inputs here?",
      "range": {
        "startLine": 224,
        "startChar": 46,
        "endLine": 224,
        "endChar": 50
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79d4d799_fc3f3e56",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "10 used as an input to a test that is supposed to fail, while it\u0027s also an input to the previous test that is expected to succeed. My recommendation is to change this so that the fixture avoids the cartesian product which -- I think -- is not appropriate here. In other words, feed it with pre-made tuples like:\n\n- (M\u003dvalid, N\u003dinvalid1)\n- (M\u003dvalid, N\u003dinvalid2)\n- (M\u003dvalid, N\u003dinvalid3)\n- (M\u003dinvalid1, N\u003dvalid)\n- (M\u003dinvalid2, N\u003dvalid)\n- (M\u003dinvalid3, N\u003dvalid)",
      "range": {
        "startLine": 224,
        "startChar": 37,
        "endLine": 224,
        "endChar": 39
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1893692_3cd828fb",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-23T09:54:12Z",
      "side": 1,
      "message": "I added the non integer case in case the user inputs non integers values... I want to be sure that the program will still correctly reject non integer values if somebody changes the assignment functions later on (could be to support particular assignments off the grid  internal to a superchannel).I want to be sure that future changes be aware that the initial functions only work for integer, and the future development will have to properly change the assignment functions. may be the test could then just check the n is a signed integer and m a non null unssigned integer ?",
      "parentUuid": "93801ea0_6ada9772",
      "range": {
        "startLine": 224,
        "startChar": 46,
        "endLine": 224,
        "endChar": 50
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9353f3a_24d1cb83",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-23T12:20:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79d4d799_fc3f3e56",
      "range": {
        "startLine": 224,
        "startChar": 37,
        "endLine": 224,
        "endChar": 39
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73170c78_2054e22f",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-23T12:37:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1893692_3cd828fb",
      "range": {
        "startLine": 224,
        "startChar": 46,
        "endLine": 224,
        "endChar": 50
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6964ee71_2e1cfe8d",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T20:18:43Z",
      "side": 1,
      "message": "This test checks whether OMS.assign_spectrum returns false upon failure. I checked all callers of this method, and outside of the test suite it\u0027s only called from pth_assign_spectrum -- which does not check the return value, so we have a silent failure (ok, \"verbose failure\" because it\u0027s logged). Can we change that method to raise an exception when called with invalid input?",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdfffea4_5b11a8bd",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-23T09:54:12Z",
      "side": 1,
      "message": "good point: I agreed this should be changed",
      "parentUuid": "6964ee71_2e1cfe8d",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80a97747_6319e604",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 237,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-23T12:37:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdfffea4_5b11a8bd",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34002bf8_77853ec3",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 290,
      "author": {
        "id": 1009907
      },
      "writtenOn": "2020-04-22T14:29:28Z",
      "side": 1,
      "message": "I also made some cosmetic fix-ups, such as saying \"paths\" instead of \"pths\". I think that it\u0027s easier to read that way, but I will revert this if you insist.",
      "range": {
        "startLine": 290,
        "startChar": 4,
        "endLine": 290,
        "endChar": 8
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bb325c2_4c66b54d",
        "filename": "tests/test_spectrum_assignment.py",
        "patchSetId": 6
      },
      "lineNbr": 290,
      "author": {
        "id": 1017751
      },
      "writtenOn": "2020-04-22T15:23:55Z",
      "side": 1,
      "message": "I am not good at finding variable names :) , agreed!",
      "parentUuid": "34002bf8_77853ec3",
      "range": {
        "startLine": 290,
        "startChar": 4,
        "endLine": 290,
        "endChar": 8
      },
      "revId": "e04d215732eaa0c7a0be609aff32f3bfcaa9f8f2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}